[{"content":"What does x.y.z stand for? In a given version number, x.y.z stands for major.minor.patch.\nE.g 1.2.4 means:\n Major release: 1 Minor release: 2 Patch release: 4  Major Versions Major versions should be incremented when you introduce huge change to a project, and specifically when you are making something no longer backwards compatible.\nMinor Versions Minor versions should be incremented when you introduce a new feature or a small to medium change. The product remains mostly the same but you have introduced something new.\nPatch Versions Patch versions should be incremented when you fix a bug, or tweak a small setting. A very small change.\nIncrementing Version Numbers When incrementing versions, major takes priority over minor and minor takes priority over patch. This means when you increment a minor version, the patch version gets reset to 0, and when you increment a major version, the minor version is reset to 0. For example:\n 1.0.0 1.0.1 1.1.0 1.2.0 2.0.0  ","permalink":"https://dombarter.co.uk/posts/semantic-versioning/","summary":"How to correctly version things using the x.y.z format","title":"Semantic Versioning"},{"content":"When did I learn about GitFlow? I learnt about GitFlow during my placement at 3squared, as it was the agreed method for managing branches across the different products and teams. As placement students we had to fully understand how GitFlow worked before we could start working on any of the companies products.\nWhy is GitFlow helpful? GitFLow helps large teams manage new features, deployments, hotfixes and ensuring there is a chain-of-command in respect of code moving between branches.\nHow does GitFlow work? Image from Medium\nThe branches  master: This branch mirrors the state of the deployed environment. develop: This branch contains a collection of all the most up to date features. feature/*: These branches are based off develop and are where the new changes are written, before being merged back into develop. release/*: These branches are based off develop and are where you make final config changes ready to be deployed to a specific environment prior to being merged into master. hotfix/*: These branches are based off master to make quick fixes that can be quickly be merged back into master to be deployed.  Starting a new feature You\u0026rsquo;ve just been assigned a ticket and it\u0026rsquo;s time to start coding! You will want to create a new feature branch based off develop. For example feature/add-profile-page. Put all your commits and changes related to a given ticket/workload on this branch. Once you have finished your changes open a pull request from your feature branch to develop.\nWhen doing feature work you will simply by winding in and out of develop.\nCode reviewing Whenever work wants to be moved onto the develop branch it must be peer reviewed by a senior developer. As a junior developer this is great because you can receive feedback but it also ensures code style is maintained and no glaring issues are introduced. It also means code can enter the the develop branch without people knowing about it!\nDeployments There is now a collection of tickets on the develop branch ready to be deployed. At this point a new release branch will be made such as release/001.002.000 based off develop. On this branch you can make final config changes such as changing database connection strings to live ones rather than local ones.\nOnce this is ready you should merge the release branch into master and perform your deployment.\nHotfixes If there are any issues on production environment and you need a quicker fix than following the \u0026lsquo;feature -\u0026gt; develop -\u0026gt; release -\u0026gt; master\u0026rsquo; route, you can make a hotfix branch. Eg. hotfix/001.002.001. In this branch you can make brief changes and quickly get them deployed.\nThis hotfix branch should be merged into master to be deployed, and back into develop to ensure your changes don\u0026rsquo;t get lost.\nMore information You can read more about GitFlow in this Atlassian guide\n","permalink":"https://dombarter.co.uk/posts/introduction-to-git-flow/","summary":"Introducing GitFlow, a well established method of branching in a git repository with multiple members","title":"Introduction to Git Flow"},{"content":"This is my about page, I still need to write it!\n","permalink":"https://dombarter.co.uk/about/","summary":"This is my about page, I still need to write it!","title":"About"},{"content":"Ever wondered what happens when you fill a computer screen with llamas?\nNo I don\u0026rsquo;t think many people have!\nWell it turns out I wanted to find out\u0026hellip;\nBuilt in plain HTML, CSS and JavaScript with help from Phaser.js - please go and enjoy my llama physics engine:\ndombarter.co.uk/llama/\nAnd if you\u0026rsquo;re interested in the source code:\nView GitHub repository\n","permalink":"https://dombarter.co.uk/projects/llamas/","summary":"It\u0026rsquo;s llamas and physics. Who knows what could happen?","title":"Llama Physics Engine"}]